package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import model.dto.AgentBySalseDTO;
import model.dto.MemberDTO;
import model.dto.MemberUpdateGradeDTO;
import util.DBUtil;



public class AdminDAO {
	private static AdminDAO instance = new AdminDAO();
	private AdminDAO() {}
	
	public static AdminDAO getInstance() {
		return instance;
	}
	
	private static Properties info = DBUtil.getInfo();

	public ArrayList<AgentBySalseDTO> allAgentBySalseList() throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<AgentBySalseDTO> list = null;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("allAgentBySalseList"));
			rset = pstmt.executeQuery();
			list = new ArrayList<AgentBySalseDTO>();
			while(rset.next()) {
				list.add(new AgentBySalseDTO(rset.getString(1), rset.getString(2), rset.getInt(3)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return list;
	}

	public ArrayList<AgentBySalseDTO> agentByOneSalsesList(int agtNo) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<AgentBySalseDTO> list = null;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("agentByOneSalsesList"));
			pstmt.setInt(1, agtNo);
			rset = pstmt.executeQuery();
			list = new ArrayList<AgentBySalseDTO>();
			while(rset.next()) {
				list.add(new AgentBySalseDTO(rset.getString(1), rset.getString(2), rset.getInt(3)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return list;
	}
	
	public static ArrayList<MemberDTO> allMemberList() throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;

		ArrayList<MemberDTO> memAllWithoutPw = null;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("allMemberList"));
			rset = pstmt.executeQuery();

			memAllWithoutPw = new ArrayList<MemberDTO>();

			while (rset.next()) {
				memAllWithoutPw.add(new MemberDTO(rset.getString(1),rset.getString(2),rset.getString(3),rset.getString(4),rset.getString(5),rset.getString(6),rset.getInt(7),rset.getString(8)));
			}

		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return memAllWithoutPw;
	}


	public static ArrayList<MemberDTO> allGradeMemberList(String grade) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<MemberDTO> memGradeAllWithoutPw = null;
		try {
			con = DBUtil.getConnection();
			
			pstmt = con.prepareStatement(info.getProperty("allGradeMemberList"));
			pstmt.setString(1, grade);
			
			rset = pstmt.executeQuery();

			memGradeAllWithoutPw = new ArrayList<MemberDTO>();
			while (rset.next()) {
				memGradeAllWithoutPw.add(new MemberDTO(rset.getString(1),rset.getString(2),rset.getString(3),rset.getString(4),rset.getString(5),rset.getString(6),rset.getInt(7),rset.getString(8)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return memGradeAllWithoutPw;
	 
	}

	public ArrayList<MemberUpdateGradeDTO> adminGradeSelectMember() throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<MemberUpdateGradeDTO> list = null;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("adminGradeSelectMember"));
			rset = pstmt.executeQuery();
			list = new ArrayList<MemberUpdateGradeDTO>();
			while(rset.next()) {
				list.add(new MemberUpdateGradeDTO(rset.getString(1), rset.getString(5)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return list;
	}

	public boolean adminGradeUpdateMember(ArrayList<MemberUpdateGradeDTO> list) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		boolean result = false;
		try{
			con = DBUtil.getConnection();
			for (int i = 0; i < list.size(); i++) {
				pstmt = con.prepareStatement(info.getProperty("adminGradeUpdateMember"));
				pstmt.setString(1, list.get(i).getUpdateGrade());
				pstmt.setString(2, list.get(i).getMemID());
				pstmt.executeUpdate();
			}
			result = true;
		} finally {
			DBUtil.close(con, pstmt);
		}
		return result;
	}
}
