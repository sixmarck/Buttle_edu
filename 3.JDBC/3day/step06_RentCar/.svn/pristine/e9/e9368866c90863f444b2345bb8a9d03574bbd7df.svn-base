package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import model.dto.CarDTO;
import model.dto.CarRateDTO;
import model.dto.CarRentTotalDTO;
import model.dto.CarResDTO;
import model.dto.MemberOneSalsDTO;
import util.DBUtil;
import util.Util;

public class CarDAO {
	private static CarDAO instance = new CarDAO();
	private CarDAO() {}
	public static CarDAO getInstance() {
		return instance;
	}

	private static Properties info = DBUtil.getInfo();

	
	public ArrayList<CarDTO> carAll() throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;

		ArrayList<CarDTO> carDataAll = null;
		
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("carAll"));
			rset = pstmt.executeQuery();
			carDataAll = new ArrayList<CarDTO>();
			while (rset.next()) {
				carDataAll.add(new CarDTO(rset.getInt(2),rset.getString(3),rset.getString(4),
						rset.getString(5),rset.getString(6), rset.getInt(7), rset.getString(8)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return carDataAll;
	}
////////////////////////////////돌려받는 금액
	public ArrayList<CarDTO> carCancleReturnMoney(String memID, int resNo) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;

		ArrayList<CarDTO> carReturnMoney = null;
		
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("carCancleReturnMoney"));
			rset = pstmt.executeQuery();
			carReturnMoney = new ArrayList<CarDTO>();
			while (rset.next()) {
				carReturnMoney.add(new CarDTO(rset.getString(1), rset.getInt(2)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return carReturnMoney;
	}
///////////////////////////////////////////////////////////////////	
	public static boolean insertCar(CarDTO car) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		boolean result = false;

		try {
			con = DBUtil.getConnection();
			pstmt = con
					.prepareStatement(info.getProperty("insertCar"));
			pstmt.setInt(1, car.getAgtNo());
			pstmt.setString(2, car.getCarName());
			pstmt.setString(3, car.getCarNum());
			pstmt.setString(4, car.getCarPax());
			pstmt.setString(5, car.getCarKind());
			pstmt.setInt(6, car.getCarPrice());
			pstmt.setString(7, car.getCarFuel());
			
			int i = pstmt.executeUpdate();
			if (i == 1) {
				result = true;
			}
		} finally {
			DBUtil.close(con, pstmt, null);
		}
		return result;
	}

	public static int deleteCar(int i) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		int result = 0;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("deleteCar"));
			pstmt.setInt(1, i);
			result = pstmt.executeUpdate();
		} finally {
			DBUtil.close(con, pstmt);
		}
		return result;
	}

	public static ArrayList<CarResDTO> resInfoList(String id) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		ArrayList<CarResDTO> resInfoAll = null;
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("resInfoList"));
			pstmt.setString(1, id);
			rset = pstmt.executeQuery();
			resInfoAll = new ArrayList<CarResDTO>();
			while (rset.next()) {
				resInfoAll.add(new CarResDTO(rset.getInt(1),rset.getString(2),rset.getDate(3),rset.getDate(4),rset.getDate(5),rset.getInt(6), rset.getInt(6)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return resInfoAll;
	}
	
	//rateInfoList
		public ArrayList<CarRateDTO> rateInfoList() throws SQLException{
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rset = null;
			
			ArrayList<CarRateDTO> rateInfoAll = null;
			try {
				con = DBUtil.getConnection();
				pstmt = con.prepareStatement(info.getProperty("rateInfoList"));
				rset = pstmt.executeQuery();
				rateInfoAll = new ArrayList<CarRateDTO>();
				while (rset.next()) {
					rateInfoAll.add(new CarRateDTO(rset.getString(1),rset.getString(2), rset.getInt(3)));
				}
			} finally {
				DBUtil.close(con, pstmt, rset);
			}
			return rateInfoAll;
		}


	public ArrayList<CarDTO> rentCarList(int day, String carKind, int agtNo) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		ArrayList<CarDTO> list = null;
		
		try {
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("rentCarList"));
			pstmt.setInt(1, agtNo);
			pstmt.setString(2, carKind);
			rset = pstmt.executeQuery();
			list = new ArrayList<CarDTO>();
			while(rset.next()) {
				list.add(new CarDTO(rset.getInt(1), rset.getString(2), rset.getString(3), rset.getInt(4), rset.getString(5)));
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return list;
	}

	public CarRentTotalDTO paymentInformation(String memID, int carNo, int day, int agtNo, int option) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		MemberOneSalsDTO mo = null;
		CarRentTotalDTO crt = null;
		try {
			mo = MemberDAO.getInstance().selectMemberOneSals(memID);
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("selectCarAvailableOne"));
			pstmt.setInt(1, carNo);
			rset = pstmt.executeQuery();
			if(rset.next()) {

				
				crt = new CarRentTotalDTO(rset.getInt(1), rset.getString(2), rset.getInt(3), rset.getInt(4), rset.getString(5), agtNo, option, day, mo.getMemMileage(), mo.getDisValue(), (int) ((int)(rset.getInt(4) * day +Util.CAROPTION[option])*(1-mo.getDisValue())));
				
			}
		} finally {
			DBUtil.close(con, pstmt, rset);
		}
		return crt;
	}
	public Connection registerReservation(String memID, CarRentTotalDTO crt) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DBUtil.getConnectionNotAuto();
			MileageDAO.getInstance().mileageUsage(memID, crt, con);
			
			pstmt = con.prepareStatement(info.getProperty("registerReservation"));
		    
			pstmt.setInt(1, crt.getDay());
			if(crt.getCarOption() == 0) {
				pstmt.setString(2, null);
			} else {
				pstmt.setInt(2, crt.getCarOption());
			}
			pstmt.setInt(3, crt.getResTotal());
			pstmt.setInt(4, crt.getAgtNo());
			pstmt.setString(5, memID);
			
			pstmt.executeUpdate();
		} catch(SQLException e){
			e.printStackTrace();
		}finally {
			DBUtil.close(pstmt);
		}
		return con;
	}
	public Connection updateCarState(CarRentTotalDTO crt, Connection con) throws SQLException{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = con.prepareStatement(info.getProperty("updateCarState"));
			pstmt.setInt(1, crt.getCarNo());
			pstmt.executeUpdate();
		}finally {
			DBUtil.close(pstmt);
		}
		return con;
	}
	
	

	public Connection resDelete (int resNo) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DBUtil.getConnectionNotAuto();
			pstmt =con.prepareStatement(info.getProperty("resDelete"));
			pstmt.setInt(1,resNo);
			
			pstmt.executeUpdate();
		} finally{
			DBUtil.close(pstmt);
		}
		return con;
	}



	public Connection resDeleteBackup (int carNo, String memID) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DBUtil.getConnectionNotAuto();
			pstmt = con.prepareStatement(info.getProperty("resDeleteBackup"));
			pstmt.setInt(1, carNo);
			pstmt.setString(2,memID);
			
			pstmt.executeUpdate();
		} finally{
			DBUtil.close(pstmt);
		}
		return con;
	}

	public Connection resDeleteMileUpdate (String memID) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DBUtil.getConnectionNotAuto();
			pstmt = con.prepareStatement(info.getProperty("resDeleteMileUpdate"));
			pstmt.setString(1,memID);
			
			pstmt.executeUpdate();
		} finally{
			DBUtil.close(pstmt);
		}
		return con;
	}

	public Connection resDeleteStateChange (int carNo) throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DBUtil.getConnectionNotAuto();
			pstmt = con.prepareStatement(info.getProperty("resDeleteStateChange"));
			pstmt.setInt(1, carNo);
			
			pstmt.executeUpdate();
		} finally{
			DBUtil.close(pstmt);
		}
		return con;
	}
	public static int getCarNum(int resNo)  throws SQLException{
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		int carNum = 0;
		
		try{
			con = DBUtil.getConnection();
			pstmt = con.prepareStatement(info.getProperty("getCarNum"));
			pstmt.setInt(1, resNo);
			pstmt.executeUpdate();
		}finally {
			DBUtil.close(con, pstmt, rset);
		}
		return carNum;
	}
	
	

}
